import EditorActionsManager from './EditorActionsManager';
import FileOperationsManager, { IPathwayInfo } from './FileOperationsManager';
import { IProfileMetaData, IPathwayData } from './react-pathway-mapper';
import ViewOperationsManager from './ViewOperationsManager';
export default class PathwayActions {
    selectedPathway: string;
    fileManager: FileOperationsManager;
    editor: EditorActionsManager;
    undoRedoManager: any;
    pathwayHandler: (pathwayName: string) => void;
    includePathway: (pathwayData: IPathwayData) => void;
    eh: any;
    profiles: IProfileMetaData[];
    uploader: any;
    isCBioPortal: boolean;
    viewOperationsManager: ViewOperationsManager;
    constructor(pathwayHandler: (pathwayName: string) => void, profiles: IProfileMetaData[], fileManager: FileOperationsManager, includePathway: (pathwayData: IPathwayData) => void, isCBioPortal: boolean);
    align(param: string): void;
    onChangeFile(e: any): void;
    upload(): void;
    setUploader(uploader: any): void;
    readonly getPathwayInfo: IPathwayInfo;
    setPathwayInfo(other: IPathwayInfo): void;
    undo(): void;
    redo(): void;
    export(isSIFNX: boolean): void;
    resetUndoStack(): void;
    newPathway(): void;
    changePathway(pathwayName: string): void;
    highlightNeighbours(): void;
    highlightSelected(): void;
    validateGenes(): void;
    showAll(): void;
    hideSelected(): void;
    deleteSelected(): void;
    addEdge(edgeTypeIndex: number): void;
    changeNodeName(oldName: string, newName: string): void;
    addNode(nodeType: any): void;
    searchGene(geneName: string): void;
    removeAllData(): void;
    removeAllHighlight(): void;
    processFile(file: File): void;
    saveAsPng(): void;
    editorHandler(editor: any, eh: any, undoRedoManager: any, viewOperationsManager: any): void;
    loadSampleData(): void;
    performLayout(): void;
}
